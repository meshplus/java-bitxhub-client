syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "transaction.proto";
import "receipt.proto";
import "block.proto";
import "chain.proto";

service ChainBroker {
    rpc Subscribe (SubscriptionRequest) returns (stream Response) {
        option (google.api.http) = {
            get: "/v1/subscription"
        };
    }

    rpc GetBlockHeader (GetBlockHeaderRequest) returns (stream pb.BlockHeader) {
        option (google.api.http) = {
            get: "/v1/block_header"
        };
    }

    rpc GetInterchainTxWrappers (GetInterchainTxWrappersRequest) returns (stream InterchainTxWrappers) {
        option (google.api.http) = {
            get: "/v1/interchain_tx_wrappers"
        };
    }

    rpc SendTransaction (pb.Transaction) returns (TransactionHashMsg) {
        option (google.api.http) = {
            post: "/v1/transaction"
            body: "*"
        };
    }

    rpc SendView (pb.Transaction) returns (pb.Receipt) {
        option (google.api.http) = {
            post: "/v1/view"
            body: "*"
        };
    }

    rpc GetTransaction (TransactionHashMsg) returns (GetTransactionResponse) {
        option (google.api.http) = {
            get: "/v1/transaction/{tx_hash}"
        };
    }

    rpc GetReceipt (TransactionHashMsg) returns (pb.Receipt) {
        option (google.api.http) = {
            get: "/v1/receipt/{tx_hash}"
        };
    }

    rpc GetBlock (GetBlockRequest) returns (pb.Block) {
        option (google.api.http) = {
            get: "/v1/block"
        };
    }

    rpc GetBlocks (GetBlocksRequest) returns (GetBlocksResponse) {
        option (google.api.http) = {
            get: "/v1/blocks"
        };
    }

    rpc GetChainMeta (Request) returns (pb.ChainMeta) {
        option (google.api.http) = {
            get: "/v1/chain_meta"
        };
    }

    rpc GetInfo (Request) returns (Response) {
        option (google.api.http) = {
            get: "/v1/info"
        };
    }

    rpc GetAccountBalance (Address) returns (Response) {
        option (google.api.http) = {
            get: "/v1/account_balance/{address}"
        };
    }

    rpc GetMultiSigns (GetMultiSignsRequest) returns (SignResponse) {
        option (google.api.http) = {
            get: "/v1/multi_sign/{content}"
        };
    }

    rpc GetTPS(GetTPSRequest) returns (Response) {
        option (google.api.http) = {
            get: "/v1/tps/{begin}/{end}"
        };
    }

    rpc GetPendingNonceByAccount(Address) returns (Response) {
        option (google.api.http) = {
            get: "/v1/pendingNonce/{address}"
        };
    }
}

message GetBlockHeaderRequest {
    uint64 begin = 1;
    uint64 end = 2;
}

message GetInterchainTxWrappersRequest {
    uint64 begin = 1;
    uint64 end = 2;
    string pid = 3;
}

message TransactionHashMsg {
    string tx_hash = 1;
}

message GetBlockRequest {
    enum Type {
        HEIGHT = 0;
        HASH = 1;
    }
    Type type = 1;
    string value = 2;
}

message Request {
    enum Type {
        CHAIN_STATUS = 0;
        NETWORK = 1;
        VALIDATORS = 2;
    }
    Type type = 1;
}

message Response {
    bytes data = 1;
}

message SignResponse {
    map<string, bytes> sign = 1;
}

message Address {
    string address = 1;
}

message GetBlocksRequest {
    uint64 start = 1;
    uint64 end = 2;
}

message GetBlocksResponse {
    repeated pb.Block blocks = 1;
}

message SubscriptionRequest {
    enum Type {
        BLOCK = 0;
        EVENT = 1;
        INTERCHAIN_TX = 2;
        BLOCK_HEADER = 3;
        INTERCHAIN_TX_WRAPPER = 4;
        UNION_INTERCHAIN_TX_WRAPPER = 5;
    }
    Type type = 1;
    bytes extra = 2;
}

message GetMultiSignsRequest {
    enum Type {
        ASSET_EXCHANGE = 0;
        IBTP = 1;
        BLOCK_HEADER = 2;
    }
    Type type = 1;
    string content = 2;
}

message GetTransactionResponse {
    pb.Transaction tx = 1;
    pb.TransactionMeta tx_meta = 2;
}

message InterchainTxWrapper {
    repeated bytes l2Roots = 1;
    repeated bytes transaction_hashes = 2;
    repeated Transaction transactions = 3;
    uint64 height = 4;
}

message InterchainTxWrappers {
    repeated InterchainTxWrapper interchainTxWrappers = 1;
}

message GetTPSRequest {
    uint64 begin = 1;
    uint64 end = 2;
}
